See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (1 warning)
Checkstyle:   FAILED (0 errors, 13 warnings)

Correctness:  24/35 tests passed
Memory:       16/16 tests passed
Timing:       34/42 tests passed

Aggregate score: 77.33%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
7.7K Nov  1 16:18 KdTree.java
3.0K Nov  1 16:18 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
PointSET.java:14: The private instance (or static) variable 'set' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 1 warning.


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------
[WARN] PointSET.java:44:30: The numeric literal '0.01' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------
[WARN] KdTree.java:21:24: Using interface inheritance suggests poor design in this program. [Design]
[WARN] KdTree.java:145:30: The numeric literal '0.015' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:156:34: The numeric literal '0.005' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:161:34: The numeric literal '0.005' appears to be unnecessary. [NumericLiteral]
[WARN] KdTree.java:169:9: You should not need to use the 'SET' data type in this program. [IllegalType]
[WARN] KdTree.java:175:64: You should not need to use the 'SET' data type in this program. [IllegalType]
[WARN] KdTree.java:203:57: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:203:81: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:205:59: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:205:83: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:207:20: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] KdTree.java:207:54: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
Checkstyle ends with 0 errors and 12 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
    - throws wrong exception when calling range() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

  * nearest()
    - throws wrong exception when calling nearest() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 7/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt
  * input1.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.5 0.5
    - query point                   = (0.849, 0.045)
    - student   nearest()           = (0.849, 0.045)
    - reference nearest()           = (0.5, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.328826
    - (0.849, 0.045) was not inserted into data structure

  * input5.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - query point                   = (0.818, 0.376)
    - student   nearest()           = (0.818, 0.376)
    - reference nearest()           = (0.7, 0.2)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0449
    - (0.818, 0.376) was not inserted into data structure

  * input10.txt
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - query point                   = (0.011, 0.112)
    - student   nearest()           = (0.011, 0.112)
    - reference nearest()           = (0.144, 0.179)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.022178
    - (0.011, 0.112) was not inserted into data structure

==> FAILED

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.125 1.0
      B  0.75 0.5
      C  0.5 0.875
      D  0.25 0.125
      E  0.625 0.25
    - query point                   = (0.875, 0.375)
    - student   nearest()           = (0.875, 0.375)
    - reference nearest()           = (0.75, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.03125
    - (0.875, 0.375) was not inserted into data structure

  * 10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.5625 0.4375
      B  0.4375 0.125
      C  0.875 0.625
      D  0.0 0.875
      E  0.8125 1.0
      F  0.6875 0.75
      G  0.375 0.3125
      H  0.3125 0.25
      I  0.75 0.0
      J  0.9375 0.5625
    - query point                   = (1.0, 0.375)
    - student   nearest()           = (1.0, 0.375)
    - reference nearest()           = (0.9375, 0.5625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0390625
    - (1.0, 0.375) was not inserted into data structure

  * 20 random non-degenerate points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.65625 0.0
      B  0.78125 0.6875
      C  0.625 0.5
      D  0.5625 0.65625
      E  0.09375 0.3125
      F  0.0 0.71875
      G  0.71875 0.5625
      H  0.25 0.4375
      I  0.3125 0.9375
      J  0.28125 0.53125
      K  0.4375 0.90625
      L  0.15625 0.75
      M  0.1875 0.28125
      N  0.75 0.125
      O  0.59375 0.8125
      P  1.0 1.0
      Q  0.8125 0.84375
      R  0.5 0.15625
      S  0.875 0.875
      T  0.21875 0.46875
    - query point                   = (0.34375, 0.625)
    - student   nearest()           = (0.34375, 0.625)
    - reference nearest()           = (0.28125, 0.53125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0126953125
    - (0.34375, 0.625) was not inserted into data structure

  * 30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query point                   = (0.546875, 0.953125)
    - student   nearest()           = (0.546875, 0.953125)
    - reference nearest()           = (0.640625, 0.9375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.009033203125
    - (0.546875, 0.953125) was not inserted into data structure

  * 10000 random non-degenerate points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.8809661865234375, 0.173309326171875)
    - student   nearest()           = (0.8809661865234375, 0.173309326171875)
    - reference nearest()           = (0.87969970703125, 0.16912841796875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000019083963707
    - (0.8809661865234375, 0.173309326171875) was not inserted into data structure

==> FAILED

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.75 0.5
      B  0.0 0.5
      C  0.5 0.25
      D  0.0 1.0
      E  0.5 0.0
      F  0.0 0.25
      G  1.0 0.5
      H  0.25 0.75
      I  1.0 1.0
      J  0.5 1.0
    - query point                   = (1.0, 0.25)
    - student   nearest()           = (1.0, 0.25)
    - reference nearest()           = (1.0, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0625
    - (1.0, 0.25) was not inserted into data structure

  * 15 random distinct points in a 8-by-8 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.75 0.375
      B  0.75 0.75
      C  0.0 1.0
      D  0.5 0.75
      E  0.375 0.625
      F  0.25 0.75
      G  0.125 0.875
      H  0.375 0.125
      I  1.0 0.875
      J  0.875 0.25
      K  0.875 0.875
      L  0.5 1.0
      M  0.375 0.75
      N  0.625 0.875
      O  0.625 0.25
    - query point                   = (0.5, 0.875)
    - student   nearest()           = (0.5, 0.875)
    - reference nearest()           = (0.5, 0.75)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.015625
    - (0.5, 0.875) was not inserted into data structure

  * 20 random distinct points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - sequence of points inserted: 
      A  0.5625 0.9375
      B  0.375 0.1875
      C  0.0 0.5625
      D  0.4375 0.3125
      E  0.875 0.125
      F  0.375 0.5
      G  0.8125 0.4375
      H  1.0 0.5625
      I  0.9375 0.75
      J  0.1875 0.875
      K  0.625 0.1875
      L  0.1875 0.25
      M  0.25 0.6875
      N  0.5 0.5625
      O  0.0625 0.8125
      P  0.5 0.8125
      Q  0.8125 0.8125
      R  0.5625 0.0
      S  0.6875 0.3125
      T  0.0625 0.3125
    - query point                   = (0.5625, 0.625)
    - student   nearest()           = (0.5625, 0.625)
    - reference nearest()           = (0.5, 0.5625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0078125
    - (0.5625, 0.625) was not inserted into data structure

  * 100 random distinct points in a 32-by-32 grid
    - failed on trial 1 of 10000
    - query point                   = (0.4375, 0.4375)
    - student   nearest()           = (0.4375, 0.4375)
    - reference nearest()           = (0.4375, 0.40625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0009765625
    - (0.4375, 0.4375) was not inserted into data structure

  * 10000 random distinct points in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query point                   = (0.7981414794921875, 0.9380340576171875)
    - student   nearest()           = (0.7981414794921875, 0.9380340576171875)
    - reference nearest()           = (0.8005523681640625, 0.932525634765625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0000361551065
    - (0.7981414794921875, 0.9380340576171875) was not inserted into data structure

==> FAILED

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
    - failed on trial 3 of 10000
    - query point                   = (0.2109375, 0.609375)
    - student   nearest()           = (0.2109375, 0.609375)
    - reference nearest()           = (0.2109375, 0.6171875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00006103515625
    - (0.2109375, 0.609375) was not inserted into data structure

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query point                   = (0.9443359375, 0.5234375)
    - student   nearest()           = (0.9443359375, 0.5234375)
    - reference nearest()           = (0.9423828125, 0.5283203125)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000027656555176
    - (0.9443359375, 0.5234375) was not inserted into data structure

==> FAILED

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.35, 0.78)
    - reference nearest() = (0.4, 0.7)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0089
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.35, 0.78)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D E 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D 
    - failed on trial 2 of 1000

  * input10.txt
    - student   nearest() = (0.84, 0.6)
    - reference nearest() = (0.785, 0.725)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.01865
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.84, 0.6)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A C D E F B G J H I 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H I 
    - failed on trial 1 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (1.0, 0.875)
    - reference nearest() = (0.625, 0.375)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.390625
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (1.0, 0.875)
    - sequence of points inserted: 
      A  0.5 0.125
      B  0.875 0.25
      C  0.625 0.375
      D  0.0 1.0
      E  0.25 0.625
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A D E B C 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D E 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.125, 0.375)
    - reference nearest() = (0.375, 0.5)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.078125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.125, 0.375)
    - sequence of points inserted: 
      A  0.25 0.9375
      B  0.875 0.0
      C  0.5625 0.75
      D  0.3125 1.0
      E  0.375 0.5
      F  0.625 0.625
      G  0.8125 0.1875
      H  1.0 0.6875
      I  0.75 0.125
      J  0.0 0.875
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A J B C D E F G I H 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A J B C D E 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.09375, 0.71875)
    - reference nearest() = (0.03125, 0.65625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0078125
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.09375, 0.71875)
    - sequence of points inserted: 
      A  1.0 1.0
      B  0.75 0.21875
      C  0.4375 0.90625
      D  0.53125 0.625
      E  0.3125 0.5625
      F  0.03125 0.65625
      G  0.40625 0.0625
      H  0.90625 0.875
      I  0.0625 0.1875
      J  0.875 0.09375
      K  0.65625 0.5
      L  0.71875 0.78125
      M  0.28125 0.53125
      N  0.5 0.59375
      O  0.0 0.125
      P  0.78125 0.9375
      Q  0.25 0.3125
      R  0.1875 0.0
      S  0.125 0.28125
      T  0.21875 0.75
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G I O R J C E M Q S F T D K N H L P 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C E F T 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.78125, 0.890625)
    - reference nearest() = (0.734375, 0.96875)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.00830078125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 30
    - number of reference entries = 8
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.171875, 0.421875)
    - reference entry 1 = (0.671875, 0.984375)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.390625, 0.265625)
    - reference nearest() = (0.28125, 0.2265625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.01348876953125
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 50
    - number of reference entries = 21
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.3203125, 0.171875)
    - reference entry 1 = (0.890625, 0.9765625)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.32470703125, 0.03759765625)
    - reference nearest() = (0.34375, 0.0478515625)
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.000467777252197
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 1000
    - number of reference entries = 27
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.080078125, 0.72216796875)
    - reference entry 1 = (0.556640625, 0.84033203125)

    - failed on trial 1 of 1000

==> FAILED

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()
  * range()
==> passed

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
    - throws wrong exception when calling range() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

  * argument to nearest() is null
==> FAILED

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 6 of 20000
    - student   nearest()  = (0.4375, 0.25)
    - reference nearest()  = (0.5, 0.5)
    - (0.4375, 0.25) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.06640625
    - sequence of operations was:
           st.insert(0.5, 0.5)
           st.insert(0.9375, 0.8125)
           st.insert(0.125, 0.5625)
           st.insert(0.6875, 0.375)
           st.insert(1.0, 0.875)
           st.nearest((0.4375, 0.25))   ==>  (0.4375, 0.25)

  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   nearest()  = (0.515625, 0.3828125)
    - reference nearest()  = (0.796875, 0.25)
    - (0.515625, 0.3828125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.09674072265625
    - sequence of operations was:
           st.insert(0.875, 0.6484375)
           st.contains((0.0234375, 0.796875))  ==>  false
           st.insert(0.796875, 0.25)
           st.nearest((0.515625, 0.3828125))   ==>  (0.515625, 0.3828125)

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.7490234375, 0.2099609375)
    - reference nearest()  = (0.3505859375, 0.2353515625)
    - (0.7490234375, 0.2099609375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.159397125244141
    - sequence of operations was:
           st.insert(0.3505859375, 0.2353515625)
           st.contains((0.265625, 0.1484375))  ==>  false
           st.nearest((0.7490234375, 0.2099609375))   ==>  (0.7490234375, 0.2099609375)

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = (0.852783203125, 0.553955078125)
    - reference nearest()  = (0.21728515625, 0.5338134765625)
    - (0.852783203125, 0.553955078125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.404263451695442
    - sequence of operations was:
           st.insert(0.240478515625, 0.3616943359375)
           st.insert(0.21728515625, 0.5338134765625)
           st.size()  ==>  2
           st.size()  ==>  2
           st.nearest((0.852783203125, 0.553955078125))   ==>  (0.852783203125, 0.553955078125)

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 7 of 20000
    - student   nearest()  = (0.54803466796875, 0.3262939453125)
    - reference nearest()  = (0.3160247802734375, 0.43402099609375)
    - (0.54803466796875, 0.3262939453125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.065433705458418
    - sequence of operations was:
           st.insert(0.0248870849609375, 0.3150634765625)
           st.contains((0.5867919921875, 0.620086669921875))  ==>  false
           st.range([0.3548126220703125, 0.7709503173828125] x [0.0068206787109375, 0.411346435546875])  ==>  empty
           st.insert(0.3160247802734375, 0.43402099609375)
           st.contains((0.2496795654296875, 0.7423248291015625))  ==>  false
           st.contains((0.7301177978515625, 0.0131378173828125))  ==>  false
           st.nearest((0.54803466796875, 0.3262939453125))   ==>  (0.54803466796875, 0.3262939453125)

==> FAILED

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   nearest()  = (1.0, 1.0)
    - reference nearest()  = (1.0, 0.0)
    - (1.0, 1.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 1
    - sequence of operations was:
           st.insert(1.0, 0.0)
           st.contains((0.0, 1.0))  ==>  false
           st.size()  ==>  1
           st.nearest((1.0, 1.0))   ==>  (1.0, 1.0)

  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = (0.5625, 0.6875)
    - reference nearest()  = (0.3125, 0.8125)
    - (0.5625, 0.6875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.078125
    - sequence of operations was:
           st.insert(0.9375, 0.0)
           st.range([0.375, 0.5] x [0.4375, 0.8125])  ==>  empty
           st.contains((0.75, 0.8125))  ==>  false
           st.insert(0.3125, 0.8125)
           st.nearest((0.5625, 0.6875))   ==>  (0.5625, 0.6875)

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = (0.2265625, 0.4765625)
    - reference nearest()  = (0.3125, 0.6875)
    - (0.2265625, 0.4765625) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0518798828125
    - sequence of operations was:
           st.insert(0.3125, 0.6875)
           st.insert(0.78125, 0.890625)
           st.contains((0.328125, 0.6015625))  ==>  false
           st.range([0.2734375, 0.28125] x [0.0546875, 0.7890625])  ==>  empty
           st.nearest((0.2265625, 0.4765625))   ==>  (0.2265625, 0.4765625)

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2 of 20000
    - student   nearest()  = (0.1357421875, 0.04296875)
    - reference nearest()  = (0.9248046875, 0.560546875)
    - (0.1357421875, 0.04296875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.890506744384766
    - sequence of operations was:
           st.insert(0.9248046875, 0.560546875)
           st.nearest((0.1357421875, 0.04296875))   ==>  (0.1357421875, 0.04296875)

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3 of 20000
    - student   nearest()  = (0.5032958984375, 0.6368408203125)
    - reference nearest()  = (0.4783935546875, 0.873046875)
    - (0.5032958984375, 0.6368408203125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.056413426995277
    - sequence of operations was:
           st.insert(0.4783935546875, 0.873046875)
           st.contains((0.625732421875, 0.4267578125))  ==>  false
           st.nearest((0.5032958984375, 0.6368408203125))   ==>  (0.5032958984375, 0.6368408203125)

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 6 of 20000
    - student   nearest()  = (0.3991851806640625, 0.7947235107421875)
    - reference nearest()  = (0.76263427734375, 0.4482269287109375)
    - (0.3991851806640625, 0.7947235107421875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.25215512723662
    - sequence of operations was:
           st.insert(0.76263427734375, 0.4482269287109375)
           st.range([0.271331787109375, 0.8290252685546875] x [0.27020263671875, 0.6414794921875])  ==>  Y 
           st.contains((0.6297149658203125, 0.3794097900390625))  ==>  false
           st.range([0.080169677734375, 0.974456787109375] x [0.4068450927734375, 0.745941162109375])  ==>  Y 
           st.insert(0.798828125, 0.2596282958984375)
           st.nearest((0.3991851806640625, 0.7947235107421875))   ==>  (0.3991851806640625, 0.7947235107421875)

==> FAILED

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 11 of 20000
    - student   nearest()  = (1.0, 0.0)
    - reference nearest()  = (1.0, 1.0)
    - (1.0, 0.0) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 1
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(1.0, 1.0)
           st.range([0.0, 1.0] x [0.0, 0.0])  ==>  empty
           st.range([0.0, 0.0] x [0.0, 0.0])  ==>  empty
           st.range([0.0, 0.0] x [0.0, 1.0])  ==>  empty
           st.insert(0.0, 1.0)
           st.insert(0.0, 0.0)
           st.contains((0.0, 1.0))  ==>  true
           st.range([0.0, 1.0] x [1.0, 1.0])  ==>  E T 
           st.nearest((0.0, 0.0))   ==>  (0.0, 0.0)
           st.nearest((1.0, 0.0))   ==>  (1.0, 0.0)

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 11 of 20000
    - student   nearest()  = (0.625, 0.75)
    - reference nearest()  = (0.6875, 0.8125)
    - (0.625, 0.75) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.0078125
    - sequence of operations was:
           st.insert(0.75, 0.6875)
           st.range([0.25, 0.6875] x [0.625, 0.9375])  ==>  empty
           st.insert(0.6875, 0.8125)
           st.range([0.5, 0.8125] x [0.25, 0.75])  ==>  X 
           st.contains((0.3125, 0.8125))  ==>  false
           st.contains((0.8125, 0.0625))  ==>  false
           st.insert(0.3125, 0.8125)
           st.range([0.4375, 0.5625] x [0.1875, 0.625])  ==>  empty
           st.contains((0.5, 0.0))  ==>  false
           st.range([0.6875, 0.9375] x [0.25, 0.75])  ==>  X 
           st.nearest((0.625, 0.75))   ==>  (0.625, 0.75)

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 4 of 20000
    - student   nearest()  = (0.1953125, 0.5)
    - reference nearest()  = (0.125, 0.203125)
    - (0.1953125, 0.5) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.09307861328125
    - sequence of operations was:
           st.size()  ==>  0
           st.insert(0.125, 0.203125)
           st.range([0.0390625, 0.5625] x [0.5078125, 0.6171875])  ==>  empty
           st.nearest((0.1953125, 0.5))   ==>  (0.1953125, 0.5)

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = (0.6376953125, 0.2763671875)
    - reference nearest()  = (0.6513671875, 0.0966796875)
    - (0.6376953125, 0.2763671875) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.032474517822266
    - sequence of operations was:
           st.insert(0.6513671875, 0.0966796875)
           st.range([0.08203125, 0.115234375] x [0.3251953125, 0.609375])  ==>  empty
           st.insert(0.470703125, 0.6865234375)
           st.size()  ==>  2
           st.nearest((0.6376953125, 0.2763671875))   ==>  (0.6376953125, 0.2763671875)

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 12 of 20000
    - student   nearest()  = (0.440673828125, 0.8577880859375)
    - reference nearest()  = (0.3658447265625, 0.9356689453125)
    - (0.440673828125, 0.8577880859375) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.011664822697639
    - sequence of operations was:
           st.insert(0.3658447265625, 0.9356689453125)
           st.insert(0.8818359375, 0.72509765625)
           st.range([0.2069091796875, 0.906005859375] x [0.34619140625, 0.5550537109375])  ==>  empty
           st.size()  ==>  2
           st.isEmpty()  ==>  false
           st.range([0.114990234375, 0.8092041015625] x [0.103271484375, 0.5897216796875])  ==>  empty
           st.contains((0.554443359375, 0.6795654296875))  ==>  false
           st.contains((0.71142578125, 0.648681640625))  ==>  false
           st.range([0.7855224609375, 0.8538818359375] x [0.2498779296875, 0.7889404296875])  ==>  empty
           st.isEmpty()  ==>  false
           st.size()  ==>  2
           st.nearest((0.440673828125, 0.8577880859375))   ==>  (0.440673828125, 0.8577880859375)

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 5 of 20000
    - student   nearest()  = (0.3047332763671875, 0.2138214111328125)
    - reference nearest()  = (0.5667572021484375, 0.118865966796875)
    - (0.3047332763671875, 0.2138214111328125) was not inserted into data structure
    - student   distanceSquaredTo() = 0
    - reference distanceSquaredTo() = 0.077673074090853
    - sequence of operations was:
           st.insert(0.088104248046875, 0.5811767578125)
           st.insert(0.60504150390625, 0.0589599609375)
           st.insert(0.5667572021484375, 0.118865966796875)
           st.range([0.3255462646484375, 0.58587646484375] x [0.3604278564453125, 0.7477874755859375])  ==>  empty
           st.nearest((0.3047332763671875, 0.2138214111328125))   ==>  (0.3047332763671875, 0.2138214111328125)

==> FAILED

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 17/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          264                264
=> passed        2          360                360
=> passed        5          648                648
=> passed       10         1128               1128
=> passed       25         2568               2568
=> passed      100         9768               9768
=> passed      400        38568              38568
=> passed      800        76968              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          136                160
=> passed        2          248                288
=> passed        5          584                672
=> passed       10         1144               1312
=> passed       25         2824               3232
=> passed      100        11224              12832
=> passed      400        44824              51232
=> passed      800        89624             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 112.00 n + 24.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1033208         
=> passed   320000    1305419         
=> passed   640000     922930         
=> passed  1280000     854427         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     734135         
=> passed   320000     647957         
=> passed   640000     553240         
=> passed  1280000     512424         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4113         
=> passed    20000       1497         
=> passed    40000        590         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       5132         
=> passed    20000       1766         
=> passed    40000        763         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    1142691               0.0              22.6              21.6               0.0         
=> passed   320000     849578               0.0              23.0              22.0               0.0         
=> passed   640000     810312               0.0              24.5              23.5               0.0         
=> passed  1280000     562301               0.0              26.6              25.6               0.0         
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     788882              18.5              17.5               0.0         
=> passed    20000     758920              19.7              18.7               0.0         
=> passed    40000     930781              21.8              20.8               0.0         
=> passed    80000     717399              22.0              21.0               0.0         
=> passed   160000     486906              23.2              22.2               0.0         
=> passed   320000     504877              25.0              24.0               0.0         
=> passed   640000     515829              25.7              24.7               0.0         
=> passed  1280000     471866              27.2              26.2               0.0         
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     219114              49.4              31.1              50.1              12.1         
=> passed    20000     257951              51.7              32.6              53.3              16.2         
=> passed    40000     221519              63.9              39.3              63.1              14.1         
=> passed    80000     338422              66.1              40.7              65.2              14.9         
=> passed   160000     297710              69.0              42.5              70.9              20.4         
=> passed   320000     231226              66.0              40.2              65.2              15.7         
=> passed   640000     201147              71.0              43.3              70.7              19.2         
=> passed  1280000     189485              77.7              47.0              74.8              14.2         
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------

    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Point2D exceeds limit: 1000000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> 0/8 tests passed



Total: 20/28 tests passed!


================================================================
